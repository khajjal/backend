Index: src/main/java/com/vacuumhead/wesplit/tables/UserAccount.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.vacuumhead.wesplit.tables;\n\nimport javax.persistence.*;\nimport java.io.Serializable;\n\n/**\n * Created with IntelliJ IDEA.\n * User: pratyushverma\n * Date: 20/02/13\n * Time: 3:59 PM\n * To change this template use File | Settings | File Templates.\n */\n@Entity\n@Table(name = \"USER_ACCOUNT\", uniqueConstraints = {\n        @UniqueConstraint(columnNames = {\"username\", \"account_id\"})\n})\npublic class UserAccount implements Serializable {\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    @Column(name = \"ACCOUNT_ID\")\n    private Integer accountId = 1;\n\n    @Column(name = \"USERNAME\")\n    private String username;\n\n    @Column(name = \"PASSWORD\")\n    private String password;\n    @OneToOne(cascade = CascadeType.ALL)\n    @PrimaryKeyJoinColumn\n    private User user;\n\n    private boolean isActive;\n\n    public boolean isActive() {\n        return isActive;\n    }\n\n    public void setActive(boolean active) {\n        isActive = active;\n    }\n\n    public User getUser() {\n        return user;\n    }\n\n    public void setUser(User user) {\n        this.user = user;\n    }\n\n    public Integer getAccountId() {\n        return accountId;\n    }\n\n    public UserAccount() {\n    }\n\n    public UserAccount(String username, String password) {\n        this.username = username;\n        this.password = password;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n\n\n\n}\n
===================================================================
--- src/main/java/com/vacuumhead/wesplit/tables/UserAccount.java	(revision 4b6d9cdec10d697b6fe7814796070bc2a43da59b)
+++ src/main/java/com/vacuumhead/wesplit/tables/UserAccount.java	(revision )
@@ -26,8 +26,8 @@
     @Column(name = "PASSWORD")
     private String password;
     @OneToOne(cascade = CascadeType.ALL)
-    @PrimaryKeyJoinColumn
-    private User user;
+    @JoinColumn(name = "USER_ID")
+    private User userEmbedded;
 
     private boolean isActive;
 
@@ -39,12 +39,12 @@
         isActive = active;
     }
 
-    public User getUser() {
-        return user;
+    public User getUserEmbedded() {
+        return userEmbedded;
     }
 
-    public void setUser(User user) {
-        this.user = user;
+    public void setUserEmbedded(User userEmbedded) {
+        this.userEmbedded = userEmbedded;
     }
 
     public Integer getAccountId() {
Index: src/main/java/com/vacuumhead/wesplit/application/UserServiceApplicationLogic.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.vacuumhead.wesplit.application;\n\nimport com.vacuumhead.wesplit.constants.AccountCodes;\nimport com.vacuumhead.wesplit.dao.IUserAccountDao;\nimport com.vacuumhead.wesplit.dao.IUserDao;\nimport com.vacuumhead.wesplit.dao.UserAccountDao;\nimport com.vacuumhead.wesplit.tables.Group;\nimport com.vacuumhead.wesplit.tables.User;\nimport com.vacuumhead.wesplit.tables.UserAccount;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by IntelliJ IDEA.\n * User: pratyushverma\n * Date: 24/03/13\n * Time: 12:47 PM\n * To change this template use File | Settings | File Templates.\n */\npublic class UserServiceApplicationLogic implements IUserServiceApplicationLogic {\n\n    private IUserAccountDao userAccountDao;\n    private IUserDao userDao;\n\n    public UserServiceApplicationLogic(IUserAccountDao userAccountDao, IUserDao userDao) {\n        this.userAccountDao = userAccountDao;\n        this.userDao = userDao;\n    }\n\n    public UserServiceApplicationLogic(UserAccountDao userAccountDao) {\n    }\n\n    public AccountCodes createUser(String username, String password) {\n        if (checkExistUser(username)) {\n            return AccountCodes.ACCOUNT_ALREADY_EXIST;\n        }\n        userAccountDao.createUserAccount(new UserAccount(username, password));\n        return AccountCodes.ACCOUNT_CREATION_SUCCESSFUL;\n    }\n\n    public AccountCodes loginUser(String username, String password) {\n\n        UserAccount userInfo = retrieveUserAccount(username);\n        if (userInfo == null) {\n            return AccountCodes.ACCOUNT_DOES_NOT_EXIST;\n        }\n\n        if (userInfo.getPassword().equals(password)) {\n            return AccountCodes.CREDENTIALS_VALID;\n        } else {\n            return AccountCodes.CREDENTIALS_INVALID;\n        }\n    }\n\n    public AccountCodes checkIfUserExist(String username) {\n        return checkExistUser(username) ? AccountCodes.ACCOUNT_ALREADY_EXIST : AccountCodes.ACCOUNT_DOES_NOT_EXIST;\n    }\n\n    public List<Group> retrieveAllGroupForUser(Integer accountId) {\n        Map<String, Group> groupMap = new HashMap<String, Group>();\n\n        User user = userDao.retrieveUserById(accountId);\n        return user.getGroupMemberList();\n    }\n\n    private boolean checkExistUser(String username) {\n        return userAccountDao.retrieveUserAccount(username) != null;\n    }\n\n    private UserAccount retrieveUserAccount(String username) {\n        return userAccountDao.retrieveUserAccount(username);\n    }\n\n    private UserAccount retrieveUserAccount(Integer accountId) {\n        return userAccountDao.retrieveUserAccount(accountId);\n    }\n}\n
===================================================================
--- src/main/java/com/vacuumhead/wesplit/application/UserServiceApplicationLogic.java	(revision 4b6d9cdec10d697b6fe7814796070bc2a43da59b)
+++ src/main/java/com/vacuumhead/wesplit/application/UserServiceApplicationLogic.java	(revision )
@@ -36,7 +36,11 @@
         if (checkExistUser(username)) {
             return AccountCodes.ACCOUNT_ALREADY_EXIST;
         }
-        userAccountDao.createUserAccount(new UserAccount(username, password));
+        UserAccount userAccount=  new UserAccount(username, password);
+        User user=new User();
+        userAccount.setUserEmbedded(user);
+        user.setUserAccountEmbedded(userAccount);
+        userAccountDao.createUserAccount(userAccount);
         return AccountCodes.ACCOUNT_CREATION_SUCCESSFUL;
     }
 
Index: src/main/java/com/vacuumhead/wesplit/tables/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.vacuumhead.wesplit.tables;\r\n\r\nimport javax.persistence.*;\r\nimport java.io.Serializable;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n\r\n/**\r\n * Created with IntelliJ IDEA.\r\n * User: Vinay\r\n * Date: 23/3/13\r\n * Time: 2:00 AM\r\n * To change this template use File | Settings | File Templates.\r\n */\r\n@Entity\r\n@Table(name=\"USER\")\r\npublic class User implements Serializable {\r\n    @Id\r\n    @Column(name=\"USER_ID\")\r\n    private int userId;\r\n\r\n    @ManyToMany(cascade = CascadeType.ALL)\r\n    @JoinTable(name = \"MEMBERSHIP\", schema = \"wesplit_ddb\",\r\n            joinColumns = { @JoinColumn(name = \"USER_ID\")},\r\n            inverseJoinColumns = { @JoinColumn(name = \"GROUP_ID\") })\r\n    private List<Group> groupMemberList=new ArrayList<Group>();\r\n\r\n    @ManyToMany(cascade = CascadeType.ALL)\r\n    @JoinTable(name = \"ADMIN\", schema = \"wesplit_ddb\",\r\n            joinColumns = { @JoinColumn(name = \"USER_ID\")},\r\n            inverseJoinColumns = { @JoinColumn(name = \"GROUP_ID\") })\r\n    private List<Group> groupAdminList=new ArrayList<Group>();\r\n    public User() {\r\n    }\r\n\r\n    public List<Group> getGroupMemberList() {\r\n        return groupMemberList;\r\n    }\r\n\r\n    public void setGroupMemberList(List<Group> groupMemberList) {\r\n        this.groupMemberList = groupMemberList;\r\n    }\r\n\r\n    public List<Group> getGroupAdminList() {\r\n        return groupAdminList;\r\n    }\r\n\r\n    public void setGroupAdminList(List<Group> groupAdminList) {\r\n        this.groupAdminList = groupAdminList;\r\n    }\r\n\r\n    public int getUserId() {\r\n        return userId;\r\n    }\r\n\r\n    public void setUserId(int userId) {\r\n        this.userId = userId;\r\n    }\r\n}\r\n
===================================================================
--- src/main/java/com/vacuumhead/wesplit/tables/User.java	(revision 4b6d9cdec10d697b6fe7814796070bc2a43da59b)
+++ src/main/java/com/vacuumhead/wesplit/tables/User.java	(revision )
@@ -16,10 +16,8 @@
 @Entity
 @Table(name="USER")
 public class User implements Serializable {
-    @Id
-    @Column(name="USER_ID")
-    private int userId;
 
+
     @ManyToMany(cascade = CascadeType.ALL)
     @JoinTable(name = "MEMBERSHIP", schema = "wesplit_ddb",
             joinColumns = { @JoinColumn(name = "USER_ID")},
@@ -31,9 +29,21 @@
             joinColumns = { @JoinColumn(name = "USER_ID")},
             inverseJoinColumns = { @JoinColumn(name = "GROUP_ID") })
     private List<Group> groupAdminList=new ArrayList<Group>();
+   @Id
+    @OneToOne(mappedBy = "userEmbedded")
+    private UserAccount userAccountEmbedded;
+
     public User() {
     }
 
+    public UserAccount getUserAccountEmbedded() {
+        return userAccountEmbedded;
+    }
+
+    public void setUserAccountEmbedded(UserAccount userAccountEmbedded) {
+        this.userAccountEmbedded = userAccountEmbedded;
+    }
+
     public List<Group> getGroupMemberList() {
         return groupMemberList;
     }
@@ -50,11 +60,5 @@
         this.groupAdminList = groupAdminList;
     }
 
-    public int getUserId() {
-        return userId;
-    }
 
-    public void setUserId(int userId) {
-        this.userId = userId;
-    }
 }
